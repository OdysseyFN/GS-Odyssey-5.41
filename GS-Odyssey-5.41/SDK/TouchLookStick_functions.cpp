#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TouchLookStick

#include "Basic.hpp"

#include "TouchLookStick_classes.hpp"
#include "TouchLookStick_parameters.hpp"


namespace SDK
{

// Function TouchLookStick.TouchLookStick_C.ExecuteUbergraph_TouchLookStick
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTouchLookStick_C::ExecuteUbergraph_TouchLookStick(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "ExecuteUbergraph_TouchLookStick");

	Params::TouchLookStick_C_ExecuteUbergraph_TouchLookStick Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.Fire Mode Changed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFireModeType                           NewFireMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTouchLookStick_C::Fire_Mode_Changed(EFireModeType NewFireMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "Fire Mode Changed");

	Params::TouchLookStick_C_Fire_Mode_Changed Parms{};

	Parms.NewFireMode = NewFireMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.OnHUDStateUpdate
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FFortHUDState                    NewState                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UTouchLookStick_C::OnHUDStateUpdate(const struct FFortHUDState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "OnHUDStateUpdate");

	Params::TouchLookStick_C_OnHUDStateUpdate Parms{};

	Parms.NewState = std::move(NewState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.Weapon Change
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortWeapon*                      PrevWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTouchLookStick_C::Weapon_Change(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "Weapon Change");

	Params::TouchLookStick_C_Weapon_Change Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.SetFiringState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFiring                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTouchLookStick_C::SetFiringState(bool IsFiring)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "SetFiringState");

	Params::TouchLookStick_C_SetFiringState Parms{};

	Parms.IsFiring = IsFiring;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UTouchLookStick_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TouchLookStick.TouchLookStick_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTouchLookStick_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "PreConstruct");

	Params::TouchLookStick_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.SetStickPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        NewPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTouchLookStick_C::SetStickPosition(const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "SetStickPosition");

	Params::TouchLookStick_C_SetStickPosition Parms{};

	Parms.NewPosition = std::move(NewPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.HandleTouchStarted
// (Public, BlueprintCallable, BlueprintEvent)

void UTouchLookStick_C::HandleTouchStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "HandleTouchStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TouchLookStick.TouchLookStick_C.HandleTouchEnded
// (Public, BlueprintCallable, BlueprintEvent)

void UTouchLookStick_C::HandleTouchEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "HandleTouchEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TouchLookStick.TouchLookStick_C.HandleWeaponChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In_Build_or_Edit_Mode                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RC_Pawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTouchLookStick_C::HandleWeaponChanged(bool In_Build_or_Edit_Mode, bool RC_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "HandleWeaponChanged");

	Params::TouchLookStick_C_HandleWeaponChanged Parms{};

	Parms.In_Build_or_Edit_Mode = In_Build_or_Edit_Mode;
	Parms.RC_Pawn = RC_Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TouchLookStick.TouchLookStick_C.CheckForTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     TagToCheck                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    HasTag                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTouchLookStick_C::CheckForTag(const struct FGameplayTag& TagToCheck, bool* HasTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "CheckForTag");

	Params::TouchLookStick_C_CheckForTag Parms{};

	Parms.TagToCheck = std::move(TagToCheck);

	UObject::ProcessEvent(Func, &Parms);

	if (HasTag != nullptr)
		*HasTag = Parms.HasTag;
}


// Function TouchLookStick.TouchLookStick_C.SetBrushForStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InBuild_or_Edit_Mode                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Is_RC_Pawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Found_Context                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTouchLookStick_C::SetBrushForStatus(bool InBuild_or_Edit_Mode, bool Is_RC_Pawn, bool* Found_Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "SetBrushForStatus");

	Params::TouchLookStick_C_SetBrushForStatus Parms{};

	Parms.InBuild_or_Edit_Mode = InBuild_or_Edit_Mode;
	Parms.Is_RC_Pawn = Is_RC_Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Found_Context != nullptr)
		*Found_Context = Parms.Found_Context;
}


// Function TouchLookStick.TouchLookStick_C.IsFireButtonUnderTouch
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        TouchPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTouchLookStick_C::IsFireButtonUnderTouch(const struct FVector2D& TouchPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TouchLookStick_C", "IsFireButtonUnderTouch");

	Params::TouchLookStick_C_IsFireButtonUnderTouch Parms{};

	Parms.TouchPosition = std::move(TouchPosition);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

