#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VoteResultNotificationWidget

#include "Basic.hpp"

#include "VoteResultNotificationWidget_classes.hpp"
#include "VoteResultNotificationWidget_parameters.hpp"


namespace SDK
{

// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.ExecuteUbergraph_VoteResultNotificationWidget
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteResultNotificationWidget_C::ExecuteUbergraph_VoteResultNotificationWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "ExecuteUbergraph_VoteResultNotificationWidget");

	Params::VoteResultNotificationWidget_C_ExecuteUbergraph_VoteResultNotificationWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.OnVoteEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortVoteType                           VoteType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortVoteArbitratorType                 ArbitratorType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VoteSucceeded                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoteResultNotificationWidget_C::OnVoteEnded(EFortVoteType VoteType, EFortVoteArbitratorType ArbitratorType, bool VoteSucceeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "OnVoteEnded");

	Params::VoteResultNotificationWidget_C_OnVoteEnded Parms{};

	Parms.VoteType = VoteType;
	Parms.ArbitratorType = ArbitratorType;
	Parms.VoteSucceeded = VoteSucceeded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.OnVoteStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortVoteType                           VoteType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortVoteArbitratorType                 ArbitratorType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   YesVoteCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NoVoteCount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteResultNotificationWidget_C::OnVoteStarted(EFortVoteType VoteType, EFortVoteArbitratorType ArbitratorType, int32 YesVoteCount, int32 NoVoteCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "OnVoteStarted");

	Params::VoteResultNotificationWidget_C_OnVoteStarted Parms{};

	Parms.VoteType = VoteType;
	Parms.ArbitratorType = ArbitratorType;
	Parms.YesVoteCount = YesVoteCount;
	Parms.NoVoteCount = NoVoteCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.HandleShowWidgetAnimFinished
// (BlueprintCallable, BlueprintEvent)

void UVoteResultNotificationWidget_C::HandleShowWidgetAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "HandleShowWidgetAnimFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UVoteResultNotificationWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortVoteType                           VoteType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortVoteArbitratorType                 ArbitratorType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VoteSucceeded                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoteResultNotificationWidget_C::Initialize(EFortVoteType VoteType, EFortVoteArbitratorType ArbitratorType, bool VoteSucceeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "Initialize");

	Params::VoteResultNotificationWidget_C_Initialize Parms{};

	Parms.VoteType = VoteType;
	Parms.ArbitratorType = ArbitratorType;
	Parms.VoteSucceeded = VoteSucceeded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteResultNotificationWidget.VoteResultNotificationWidget_C.IsSinglePlayerVote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EFortVoteType                           VoteType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoteResultNotificationWidget_C::IsSinglePlayerVote(EFortVoteType VoteType, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteResultNotificationWidget_C", "IsSinglePlayerVote");

	Params::VoteResultNotificationWidget_C_IsSinglePlayerVote Parms{};

	Parms.VoteType = VoteType;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

