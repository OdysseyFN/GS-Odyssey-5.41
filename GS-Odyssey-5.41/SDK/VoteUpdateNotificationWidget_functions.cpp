#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VoteUpdateNotificationWidget

#include "Basic.hpp"

#include "VoteUpdateNotificationWidget_classes.hpp"
#include "VoteUpdateNotificationWidget_parameters.hpp"


namespace SDK
{

// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.ExecuteUbergraph_VoteUpdateNotificationWidget
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteUpdateNotificationWidget_C::ExecuteUbergraph_VoteUpdateNotificationWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "ExecuteUbergraph_VoteUpdateNotificationWidget");

	Params::VoteUpdateNotificationWidget_C_ExecuteUbergraph_VoteUpdateNotificationWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.HandleOnOpenVoteDialog
// (BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::HandleOnOpenVoteDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "HandleOnOpenVoteDialog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.BndEvt__VoteAction_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UCommonButton*                    Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteUpdateNotificationWidget_C::BndEvt__VoteAction_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature(class UCommonButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "BndEvt__VoteAction_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature");

	Params::VoteUpdateNotificationWidget_C_BndEvt__VoteAction_K2Node_ComponentBoundEvent_16_CommonButtonClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.OnVoteEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortVoteType                           Param_VoteType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortVoteArbitratorType                 ArbitratorType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VoteSucceeded                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoteUpdateNotificationWidget_C::OnVoteEnded(EFortVoteType Param_VoteType, EFortVoteArbitratorType ArbitratorType, bool VoteSucceeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "OnVoteEnded");

	Params::VoteUpdateNotificationWidget_C_OnVoteEnded Parms{};

	Parms.Param_VoteType = Param_VoteType;
	Parms.ArbitratorType = ArbitratorType;
	Parms.VoteSucceeded = VoteSucceeded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.OnVoteStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortVoteType                           Param_VoteType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortVoteArbitratorType                 ArbitratorType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_YesVoteCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NoVoteCount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteUpdateNotificationWidget_C::OnVoteStarted(EFortVoteType Param_VoteType, EFortVoteArbitratorType ArbitratorType, int32 Param_YesVoteCount, int32 Param_NoVoteCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "OnVoteStarted");

	Params::VoteUpdateNotificationWidget_C_OnVoteStarted Parms{};

	Parms.Param_VoteType = Param_VoteType;
	Parms.ArbitratorType = ArbitratorType;
	Parms.Param_YesVoteCount = Param_YesVoteCount;
	Parms.Param_NoVoteCount = Param_NoVoteCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.OnVoteUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortVoteType                           Param_VoteType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_YesVoteCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NoVoteCount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteUpdateNotificationWidget_C::OnVoteUpdated(EFortVoteType Param_VoteType, int32 Param_YesVoteCount, int32 Param_NoVoteCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "OnVoteUpdated");

	Params::VoteUpdateNotificationWidget_C_OnVoteUpdated Parms{};

	Parms.Param_VoteType = Param_VoteType;
	Parms.Param_YesVoteCount = Param_YesVoteCount;
	Parms.Param_NoVoteCount = Param_NoVoteCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.UpdateVoteCounts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_YesVoteCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NoVoteCount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoteUpdateNotificationWidget_C::UpdateVoteCounts(int32 Param_YesVoteCount, int32 Param_NoVoteCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "UpdateVoteCounts");

	Params::VoteUpdateNotificationWidget_C_UpdateVoteCounts Parms{};

	Parms.Param_YesVoteCount = Param_YesVoteCount;
	Parms.Param_NoVoteCount = Param_NoVoteCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.UpdateVoteAction
// (Public, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::UpdateVoteAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "UpdateVoteAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.SetupText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::SetupText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "SetupText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.SetupVoteTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::SetupVoteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "SetupVoteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.ClearVoteTimer
// (Public, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::ClearVoteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "ClearVoteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.UpdateVoteTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::UpdateVoteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "UpdateVoteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.BindEvents
// (Public, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::BindEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "BindEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.UnbindEvents
// (Public, BlueprintCallable, BlueprintEvent)

void UVoteUpdateNotificationWidget_C::UnbindEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "UnbindEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VoteUpdateNotificationWidget.VoteUpdateNotificationWidget_C.UpdateKeybindWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUsingGamepad                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoteUpdateNotificationWidget_C::UpdateKeybindWidget(bool bUsingGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoteUpdateNotificationWidget_C", "UpdateKeybindWidget");

	Params::VoteUpdateNotificationWidget_C_UpdateKeybindWidget Parms{};

	Parms.bUsingGamepad = bUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);
}

}

